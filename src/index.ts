/**
 * Represents an ArcGIS Server service item returned from directory.
 */
interface IService {
  name: string;
  type: string;
}

/**
 * Link information generated by this application
 */
interface ILinkInfo {
  name: string;
  url: string;
}

/**
 * Information about a service
 */
interface IServerInfo {
  [key: string]: any;
  currentVersion?: number;
  folders?: ILinkInfo[];
  services?: ILinkInfo[];
}

/**
 * Converts an object with "name" and "url" properties into an HTMLAnchorElement.
 * @param linkInfo An object with name and url properties
 */
function createLink(linkInfo: ILinkInfo) {
  const a = document.createElement("a");
  const destUrl = new URL(location.href);
  destUrl.searchParams.set("url", linkInfo.url);
  a.href = destUrl.toString();
  a.innerText = linkInfo.name;
  return a;
}

/**
 * Creates an HTML list of folder or service links.
 * @param linkInfos An array of link info objects.
 * @param listType Optional. Specifies the type of HTML list: "ul" (the default) or "ol".
 */
function createLinkList(linkInfos: ILinkInfo[], listType: "ul" | "ol" = "ul") {
  if (linkInfos.length === 0) {
    return null;
  }
  const list = document.createElement(listType);
  const listItems = linkInfos.map(linkInfo => {
    const li = document.createElement("li");
    const a = createLink(linkInfo);
    li.appendChild(a);
    return li;
  });
  for (const li of listItems) {
    list.appendChild(li);
  }
  return list;
}

function arrayToTable(objects: any[]): HTMLTableElement {
  const table = document.createElement("table");
  const head = table.createTHead();
  const hRow = head.insertRow();

  const body = table.createTBody();

  // Get list of all field names.
  const fieldNames = new Set<string>();
  for (const obj of objects) {
    for (const propName in obj) {
      if (obj.hasOwnProperty(propName)) {
        fieldNames.add(propName);
      }
    }
  }

  // Add a table heading cell for each property.
  fieldNames.forEach(fn => {
    const th = document.createElement("th");
    th.innerText = fn;
    hRow.appendChild(th);
  });

  objects.forEach(o => {
    const bRow = body.insertRow();
    fieldNames.forEach(fn => {
      const value = o[fn];
      const cell = bRow.insertCell();
      cell.innerText = value;
    });
  });

  return table;
}

function arrayToElement(arr: any[], propertyName?: string) {
  if (propertyName && /^(fields)|(layers)$/.test(propertyName)) {
    return arrayToTable(arr);
  }

  if (propertyName === "color") {
    arr[3] = arr[3] / 255;
    const content = `rgba(${arr.join(",")})`;
    const span = document.createElement("span");
    span.style.color = content;
    span.innerText = content;
    return span;
  }

  const list = document.createElement("ol");
  arr
    .map(item => {
      const element = toDefinitionList(item);
      const li = document.createElement("li");
      li.appendChild(element);
      return li;
    })
    .forEach(li => list.appendChild(li));
  return list;
}

/**
 * Converts an object into a DOM node.
 * @param o any type of JavaScript object or value.
 * @returns if the input is a standard object, returned value will be an HTMLDListElement.
 * For other types, such as string, number, boolean, or Date, a Text element will be returned
 */
function toDefinitionList(o: any, propertyName?: string) {
  if (o == null) {
    return document.createTextNode(o === null ? "null" : "undefined");
  }

  if (Array.isArray(o)) {
    return arrayToElement(o, propertyName);
  }

  if (typeof o === "boolean") {
    return document.createTextNode(o ? "☑" : "☐");
  }

  if (/^(string)|(number)$/.test(typeof o) || o instanceof Date) {
    return document.createTextNode(`${o}`);
  }

  const dl = document.createElement("dl");

  for (const key in o) {
    if (o.hasOwnProperty(key)) {
      const value = o[key];
      const dt = document.createElement("dt");
      dt.innerText = key;
      const dd = document.createElement("dd");
      dd.appendChild(toDefinitionList(value, key));

      [dt, dd].forEach(element => dl.appendChild(element));
    }
  }

  return dl;
}

/**
 * Provides information about a map server URL
 * @param url ArcGIS server, folder, service, or layer URL.
 */
async function getServerInfo(url: string): Promise<IServerInfo> {
  const serverResponse = await fetch(url + "?f=json");
  const serverInfoJson = await serverResponse.text();
  const serverRootRe = /^.+\/arcgis\/rest\/services\/?/i;

  function toLinkInfo(key: any, value: any) {
    const rootMatch = url.match(serverRootRe);
    const root = rootMatch ? rootMatch[0] : url;
    if (key === "folders") {
      const folderNames = value as string[];
      return folderNames.map(folderName => ({
        name: folderName,
        url: `${root}/${folderName}`
      }));
    }
    if (key === "services") {
      const services = value as IService[];
      return services.map(svc => ({
        name: svc.name,
        url: `${root}/${svc.name}/${svc.type}`
      }));
    }
    return value;
  }

  const serverInfo = JSON.parse(serverInfoJson, toLinkInfo);
  return serverInfo;
}

/**
 * Creates the main DOM element that will be added to the page body.
 * @param serverInfo parsed JSON information returned from a server, folder, service, or layer URL.
 * @returns A Document fragment to be appended to document.body.
 */
function createDom(serverInfo: IServerInfo) {
  const frag = document.createDocumentFragment();

  const dl = document.createElement("dl");

  frag.append(dl);

  if (serverInfo.currentVersion) {
    const dt = document.createElement("dt");
    dt.innerText = "Current Version";
    const dd = document.createElement("dd");
    dd.innerText = serverInfo.currentVersion as any;

    dl.appendChild(dt);
    dl.appendChild(dd);
  }

  if (serverInfo.folders) {
    // Add folder list
    const folderList = createLinkList(serverInfo.folders);
    const dt = document.createElement("dt");
    const dd = document.createElement("dd");
    dt.innerText = "Folders";
    if (folderList) {
      dd.appendChild(folderList);
    }

    dl.appendChild(dt);
    dl.appendChild(dd);
  }

  // Add service list
  if (serverInfo.services) {
    const serviceList = createLinkList(serverInfo.services);
    const dt = document.createElement("dt");
    const dd = document.createElement("dd");
    dt.innerText = "Services";
    if (serviceList) {
      dd.appendChild(serviceList);
    }

    dl.appendChild(dt);
    dl.appendChild(dd);
  }

  for (const propName in serverInfo) {
    if (serverInfo.hasOwnProperty(propName)) {
      if (/^(folders)|(services)/.test(propName)) {
        continue;
      }
      const value = serverInfo[propName];
      const dt = document.createElement("dt");
      dt.innerText = propName;

      const dd = document.createElement("dd");
      const element = toDefinitionList(value, propName);
      dd.appendChild(element);
    }
  }

  return frag;
}

(async () => {
  const urlParams = new URLSearchParams(location.search);

  const serverUrl = urlParams.get("url");

  if (!serverUrl) {
    return;
  }

  // Put URL in box:
  const input = document.querySelector<HTMLInputElement>(
    "form > input[name='url']"
  );
  if (input) {
    input.value = serverUrl;
  }

  /**
   * Tests to see if the URL is a service or layer URL.
   */
  const serviceUrlRe = /\/\w+Server(\/\d+)?\/?$/i;

  if (serviceUrlRe.test(serverUrl)) {
    const serverInfo = await getServerInfo(serverUrl);
    const dl = toDefinitionList(serverInfo);
    document.body.appendChild(dl);
  } else {
    const serverInfo = await getServerInfo(serverUrl);
    const frag = createDom(serverInfo);
    document.body.appendChild(frag);
  }
})();
